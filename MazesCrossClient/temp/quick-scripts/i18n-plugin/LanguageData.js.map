{"version":3,"sources":["LanguageData.js"],"names":["Polyglot","require","polyInst","window","i18n","languages","curLang","CC_EDITOR","Editor","Profile","load","err","profile","data","loadLanguageData","initPolyglot","language","replace","phrases","allowMissing","module","exports","init","inst","t","key","opt","updateSceneRenderers","rootNodes","cc","director","getScene","children","allLocalizedLabels","i","length","labels","getComponentsInChildren","Array","prototype","push","apply","label","updateLabel","allLocalizedSprites","sprites","sprite","updateSprite"],"mappings":"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","file":"LanguageData.js","sourceRoot":"..\\..\\..\\..\\..\\packages\\i18n\\runtime-scripts","sourcesContent":["const Polyglot = require('polyglot.min');\r\n\r\nlet polyInst = null;\r\nif (!window.i18n) {\r\n    window.i18n = {\r\n        languages: {},\r\n        curLang:''\r\n    };\r\n}\r\n\r\nif (CC_EDITOR) {\r\n    Editor.Profile.load('profile://project/i18n.json', (err, profile) => {\r\n        window.i18n.curLang = profile.data['default_language'];\r\n        if (polyInst) {\r\n            let data = loadLanguageData(window.i18n.curLang) || {};\r\n            initPolyglot(data);\r\n        }\r\n    });\r\n}\r\n\r\nfunction loadLanguageData (language) {\r\n    return window.i18n.languages[language];\r\n}\r\n\r\nfunction initPolyglot (data) {\r\n    if (data) {\r\n        if (polyInst) {\r\n            polyInst.replace(data);\r\n        } else {\r\n            polyInst = new Polyglot({ phrases: data, allowMissing: true });\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    /**\r\n     * This method allow you to switch language during runtime, language argument should be the same as your data file name\r\n     * such as when language is 'zh', it will load your 'zh.js' data source.\r\n     * @method init\r\n     * @param language - the language specific data file name, such as 'zh' to load 'zh.js'\r\n     */\r\n    init (language) {\r\n        if (language === window.i18n.curLang) {\r\n            return;\r\n        }\r\n        let data = loadLanguageData(language) || {};\r\n        window.i18n.curLang = language;\r\n        initPolyglot(data);\r\n        this.inst = polyInst;\r\n    },\r\n    /**\r\n     * this method takes a text key as input, and return the localized string\r\n     * Please read https://github.com/airbnb/polyglot.js for details\r\n     * @method t\r\n     * @return {String} localized string\r\n     * @example\r\n     *\r\n     * var myText = i18n.t('MY_TEXT_KEY');\r\n     *\r\n     * // if your data source is defined as\r\n     * // {\"hello_name\": \"Hello, %{name}\"}\r\n     * // you can use the following to interpolate the text\r\n     * var greetingText = i18n.t('hello_name', {name: 'nantas'}); // Hello, nantas\r\n     */\r\n    t (key, opt) {\r\n        if (polyInst) {\r\n            return polyInst.t(key, opt);\r\n        }\r\n    },\r\n\r\n    inst: polyInst,\r\n\r\n    updateSceneRenderers () { // very costly iterations\r\n        let rootNodes = cc.director.getScene().children;\r\n        // walk all nodes with localize label and update\r\n        let allLocalizedLabels = [];\r\n        for (let i = 0; i < rootNodes.length; ++i) {\r\n            let labels = rootNodes[i].getComponentsInChildren('LocalizedLabel');\r\n            Array.prototype.push.apply(allLocalizedLabels, labels);\r\n        }\r\n        for (let i = 0; i < allLocalizedLabels.length; ++i) {\r\n            let label = allLocalizedLabels[i];\r\n            label.updateLabel();\r\n        }\r\n        // walk all nodes with localize sprite and update\r\n        let allLocalizedSprites = [];\r\n        for (let i = 0; i < rootNodes.length; ++i) {\r\n            let sprites = rootNodes[i].getComponentsInChildren('LocalizedSprite');\r\n            Array.prototype.push.apply(allLocalizedSprites, sprites);\r\n        }\r\n        for (let i = 0; i < allLocalizedSprites.length; ++i) {\r\n            let sprite = allLocalizedSprites[i];\r\n            sprite.updateSprite(window.i18n.curLang);\r\n        }\r\n    }\r\n};"]}